# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from random import randint, choice

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(607, 266)
        MainWindow.setStyleSheet("background-color: rgb(0, 0, 0);\n"
"color: rgb(255, 255, 255);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(20, 10, 561, 61))
        font = QtGui.QFont()
        font.setPointSize(30)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(20, 90, 561, 71))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.lineEdit.setFont(font)
        self.lineEdit.setObjectName("lineEdit")
        self.lcdNumber = QtWidgets.QLCDNumber(self.centralwidget)
        self.lcdNumber.setGeometry(QtCore.QRect(230, 172, 161, 51))
        self.lcdNumber.setObjectName("lcdNumber")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(10, 180, 89, 34))
        self.pushButton_3.setObjectName("pushButton_3")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(110, 180, 91, 41))
        self.label_2.setObjectName("label_2")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(410, 190, 176, 36))
        self.widget.setObjectName("widget")
        self.gridLayout = QtWidgets.QGridLayout(self.widget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.pushButton_2 = QtWidgets.QPushButton(self.widget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout.addWidget(self.pushButton_2, 0, 0, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.widget)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 0, 1, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 607, 30))
        self.menubar.setObjectName("menubar")
        self.menudifficulty = QtWidgets.QMenu(self.menubar)
        self.menudifficulty.setObjectName("menudifficulty")
        self.menumode = QtWidgets.QMenu(self.menubar)
        self.menumode.setObjectName("menumode")
        MainWindow.setMenuBar(self.menubar)
        self.action0 = QtWidgets.QAction(MainWindow)
        self.action0.setObjectName("action0")
        self.action1 = QtWidgets.QAction(MainWindow)
        self.action1.setObjectName("action1")
        self.action3 = QtWidgets.QAction(MainWindow)
        self.action3.setObjectName("action3")
        self.actionmultiply_division = QtWidgets.QAction(MainWindow)
        self.actionmultiply_division.setObjectName("actionmultiply_division")
        self.actionsqures = QtWidgets.QAction(MainWindow)
        self.actionsqures.setObjectName("actionsqures")
        self.actionplus_minus = QtWidgets.QAction(MainWindow)
        self.actionplus_minus.setObjectName("actionplus_minus")
        self.menudifficulty.addSeparator()
        self.menudifficulty.addAction(self.action0)
        self.menudifficulty.addAction(self.action1)
        self.menudifficulty.addAction(self.action3)
        self.menumode.addAction(self.actionmultiply_division)
        self.menumode.addAction(self.actionsqures)
        self.menumode.addAction(self.actionplus_minus)
        self.menubar.addAction(self.menudifficulty.menuAction())
        self.menubar.addAction(self.menumode.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "счеты"))
        self.label.setText(_translate("MainWindow", ""))
        self.lineEdit.setText(_translate("MainWindow", ""))
        self.pushButton_3.setText(_translate("MainWindow", "new game"))
        self.label_2.setText(_translate("MainWindow", "попыток: 3"))
        self.pushButton_2.setText(_translate("MainWindow", "skip >>>"))
        self.pushButton.setText(_translate("MainWindow", "check"))
        self.menudifficulty.setTitle(_translate("MainWindow", "difficulty"))
        self.menumode.setTitle(_translate("MainWindow", "mode"))
        self.action0.setText(_translate("MainWindow", "1"))
        self.action1.setText(_translate("MainWindow", "2"))
        self.action3.setText(_translate("MainWindow", "3"))
        self.actionmultiply_division.setText(_translate("MainWindow", "plus-minus"))
        self.actionmultiply_division.setToolTip(_translate("MainWindow", "plus-minus"))
        self.actionsqures.setText(_translate("MainWindow", "squres"))
        self.actionplus_minus.setText(_translate("MainWindow", "multiply-division"))
        self.actionplus_minus.setToolTip(_translate("MainWindow", "multiply-division"))


class MyWin(QtWidgets.QMainWindow, Ui_MainWindow):
    def __init__(self):
        super().__init__()
        self.setupUi(self)
        self.app()
    def app(self):
        self.difficulty = 1
        self.mode = 1
        self.action0.triggered.connect(lambda : self.changedif(1))
        self.action1.triggered.connect(lambda: self.changedif(2))
        self.action3.triggered.connect(lambda: self.changedif(3))
        self.actionplus_minus.triggered.connect(lambda: self.changemode(2))
        self.actionmultiply_division.triggered.connect(lambda: self.changemode(1))
        self.actionsqures.triggered.connect(lambda: self.changemode(3))
        self.pushButton_3.clicked.connect(self.new)
        self.pushButton.clicked.connect(self.check)
        self.pushButton_2.clicked.connect(self.skip)
        self.lineEdit.returnPressed.connect(self.check)
    def generate(self):
        if self.difficulty == 1:
            self.number1 = randint(1, 10)
            self.number2 = randint(1, 10)
        elif self.difficulty == 2 and self.mode != 3:
            self.number1 = randint(10, 100)
            self.number2 = randint(10, 100)
        elif self.difficulty == 2 and self.mode == 3:
            self.number1 = randint(10, 31)
            self.number2 = randint(10, 31)
        elif self.difficulty == 3:
            self.number1 = randint(100, 1000)
            self.number2 = randint(100, 1000)

    def check(self):
        if int(self.lineEdit.text()) == self.rightANSW:
            value = self.lcdNumber.value()
            self.lcdNumber.display(value+1)
        else:
            tryes = int(self.label_2.text()[-1:])
            if tryes > 0:
                self.label_2.setText(f'попыток: {tryes - 1}')
            else:
                self.new()
        self.generate()
        self.game()

    def skip(self):
        tryes = int(self.label_2.text()[-1:])
        if tryes > 0:
            self.label_2.setText(f'попыток: {tryes - 1}')
        else:
            self.new()
        self.generate()
        self.game()

    def changedif(self, dif):
        self.difficulty = dif
        self.new()

    def changemode(self, mode):
        self.mode = mode
        self.new()

    def new(self):
        self.lcdNumber.display(0)
        self.label_2. setText('попыток: 3')
        self.generate()
        self.game()

    def game(self):
        if self.mode == 1:
            signs = ['-', '+']
            ex = str(self.number1) + choice(signs) + str(self.number2)
            self.label.setText(ex)
            self.rightANSW = eval(ex)
        elif self.mode == 2:
            signs = ['/', '*', '//', '%']
            ex = str(self.number1) + choice(signs) + str(self.number2)
            self.label.setText(ex)
            self.rightANSW = eval(ex)
        elif self.mode == 3:
            ex = str(self.number1) + "**2"
            self.label.setText(ex)
            self.rightANSW = eval(ex)
        self.lineEdit.setText("")
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    w = MyWin()
    w.show()
    sys.exit(app.exec_())
