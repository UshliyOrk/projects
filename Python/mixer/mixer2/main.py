# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import *
from PyQt5.QtMultimedia import *
from PyQt5.QtCore import QUrl
from PyQt5.QtGui import QIcon
import os
import glob
from mutagen import *

class Ui_MainMixer(object):
    def setupUi(self, MainMixer):
        MainMixer.setObjectName("MainMixer")
        MainMixer.resize(800, 600)
        MainMixer.setStyleSheet("background-color: qlineargradient(spread:pad, x1:0, y1:0, x2:0, y2:1, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(157, 157, 157, 255));")
        self.centralwidget = QtWidgets.QWidget(MainMixer)
        self.centralwidget.setObjectName("centralwidget")
        self.album = QtWidgets.QLabel(self.centralwidget)
        self.album.setGeometry(QtCore.QRect(20, 20, 400, 400))
        self.album.setText("")
        self.album.setObjectName("album")
        self.name = QtWidgets.QLabel(self.centralwidget)
        self.name.setGeometry(QtCore.QRect(20, 430, 400, 70))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.name.setFont(font)
        self.name.setStyleSheet("color: rgb(255, 255, 255);")
        self.name.setObjectName("name")
        self.lenth = QtWidgets.QSlider(self.centralwidget)
        self.lenth.setGeometry(QtCore.QRect(20, 510, 761, 51))
        self.lenth.setOrientation(QtCore.Qt.Horizontal)
        self.lenth.setObjectName("lenth")
        self.verticalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.verticalLayoutWidget.setGeometry(QtCore.QRect(620, 20, 160, 137))
        self.verticalLayoutWidget.setObjectName("verticalLayoutWidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.verticalLayoutWidget)
        self.verticalLayout.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout.setObjectName("verticalLayout")
        self.pushButton = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.pushButton.setFont(font)
        self.pushButton.setStyleSheet("color: rgb(255, 255, 255);")
        self.pushButton.setObjectName("pushButton")
        self.verticalLayout.addWidget(self.pushButton)
        self.pushButton_4 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.pushButton_4.setFont(font)
        self.pushButton_4.setStyleSheet("color: rgb(255, 255, 255);")
        self.pushButton_4.setObjectName("pushButton_4")
        self.verticalLayout.addWidget(self.pushButton_4)
        self.pushButton_3 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.pushButton_3.setFont(font)
        self.pushButton_3.setStyleSheet("color: rgb(255, 255, 255);")
        self.pushButton_3.setObjectName("pushButton_3")
        self.verticalLayout.addWidget(self.pushButton_3)
        self.pushButton_2 = QtWidgets.QPushButton(self.verticalLayoutWidget)
        font = QtGui.QFont()
        font.setPointSize(9)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setStyleSheet("color: rgb(255, 255, 255);")
        self.pushButton_2.setObjectName("pushButton_2")
        self.verticalLayout.addWidget(self.pushButton_2)
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.centralwidget)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(519, 399, 241, 71))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.horizontalLayout.setContentsMargins(0, 0, 0, 0)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.minutes = QtWidgets.QLCDNumber(self.horizontalLayoutWidget)
        self.minutes.setLineWidth(1)
        self.minutes.setDigitCount(2)
        self.minutes.setObjectName("minutes")
        self.horizontalLayout.addWidget(self.minutes)
        self.seconds = QtWidgets.QLCDNumber(self.horizontalLayoutWidget)
        self.seconds.setLineWidth(1)
        self.seconds.setDigitCount(2)
        self.seconds.setObjectName("seconds")
        self.horizontalLayout.addWidget(self.seconds)
        MainMixer.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainMixer)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menubar.setObjectName("menubar")
        self.menumusic = QtWidgets.QMenu(self.menubar)
        self.menumusic.setObjectName("menumusic")
        MainMixer.setMenuBar(self.menubar)
        self.actionopen_folder = QtWidgets.QAction(MainMixer)
        self.actionopen_folder.setObjectName("actionopen_folder")
        self.menumusic.addAction(self.actionopen_folder)
        self.menubar.addAction(self.menumusic.menuAction())
        self.retranslateUi(MainMixer)
        QtCore.QMetaObject.connectSlotsByName(MainMixer)

    def retranslateUi(self, MainMixer):
        _translate = QtCore.QCoreApplication.translate
        MainMixer.setWindowTitle(_translate("MainMixer", "mixer2.0"))
        MainWindow.setWindowIcon(QIcon('web.png'))
        self.name.setText(_translate("MainMixer", "song name"))
        self.pushButton.setText(_translate("MainMixer", "start"))
        self.pushButton_4.setText(_translate("MainMixer", "pause"))
        self.pushButton_3.setText(_translate("MainMixer", "next"))
        self.pushButton_2.setText(_translate("MainMixer", "privious"))
        self.menumusic.setTitle(_translate("MainMixer", "music"))
        self.actionopen_folder.setText(_translate("MainMixer", "open folder"))


class app(QtWidgets.QMainWindow, Ui_MainMixer):
    def __init__(self):
        super(app, self).__init__()
        self.setupUi(MainWindow)
        self.player = QMediaPlayer()
        self.timer = QTimer()
        self.actionopen_folder.triggered.connect(self.openFile)
        self.pushButton.clicked.connect(self.start)
        self.pushButton_2.clicked.connect(self.priv)
        self.pushButton_3.clicked.connect(self.next)
        self.pushButton_4.clicked.connect(self.pause)
        self.player.durationChanged.connect(self.setTimer)

    def openFile(self):
        self.fileDialog = QtWidgets.QFileDialog
        self.directory = self.fileDialog.getExistingDirectory(None, 'open', 'D:\\')
        self.songs = []
        for i in os.listdir(self.directory):
            if i.endswith(".mp3"):
                self.songs.append(self.directory+"/"+i)
        self.index = 0
        self.currentSong = self.songs[0]
        self.name.setText(self.currentSong.split("/")[-1])
        print(self.songs)
        print(self.directory)
        self.images = glob.glob(self.directory+"/*.jpg")
        if len(self.images) <= 0:
            self.images = glob.glob(self.directory+"/*.jpeg")
        if len(self.images) <= 0:
            if os.path.isdir(self.directory+"/Covers"):
                self.images=glob.glob(self.directory+"/Covers/*.jpg")
        print(self.images)
        if len(self.images) > 0 :
            self.image = self.images[0]
            pix = QtGui.QPixmap(self.image)
            pixScaled = pix.scaled(400, 400, transformMode=QtCore.Qt.SmoothTransformation)
            self.album.setPixmap(pixScaled)
        else:
            try:
                file = File(self.currentSong)  # mutagen can automatically detect format and type of tags
                artwork = file.tags['APIC:'].data  # access APIC frame and grab the image
                with open(self.directory+'/cover.jpg', 'wb') as img:
                    img.write(artwork)  # write artwork to new image
                self.image = self.directory+'/cover.jpg'
                pix = QtGui.QPixmap(self.image)
                pixScaled = pix.scaled(400, 400, transformMode=QtCore.Qt.SmoothTransformation)
                self.album.setPixmap(pixScaled)
            except:
                self.image = "1.png"
                pix = QtGui.QPixmap(self.image)
                pixScaled = pix.scaled(400, 400, transformMode=QtCore.Qt.SmoothTransformation)
                self.album.setPixmap(pixScaled)


    def start(self):
        self.name.setText(self.currentSong.split("/")[-1])
        self.player.setMedia(QMediaContent(QUrl.fromLocalFile(self.currentSong)))
        self.player.play()
        self.timer.timeout.connect(self.next)

    def pause(self):
        if self.timer.isActive():
            self.timer.stop()
            self.player.pause()
        else:
            self.player.play()
            self.timer.start()

    def next(self):
        if self.index < len(self.songs):
            self.index += 1
            print(self.index)
            self.currentSong = self.songs[self.index]
            self.timer.killTimer(self.timer.timerId())
            self.start()

    def priv(self):
        if self.index > 0:
            self.index -= 1
            print(self.index)
            self.currentSong = self.songs[self.index]
            self.timer.killTimer(self.timer.timerId())
            self.start()

    def setTimer(self):
        self.timer.start(self.player.duration())
        self.timer2 = QTimer()
        self.timer2.timeout.connect(self.change)
        self.timer2.start(1000)
        self.minutes.display(self.player.duration() // 1000 // 60)
        self.seconds.display(self.player.duration() // 1000 % 60)

    def change(self):
        SDV = self.seconds.value()
        MDV = self.minutes.value()
        SD = self.seconds
        MD = self.minutes
        if MDV > 0 and SDV == 0:
            MD.display(MDV - 1)
            SD.display(59)

        elif SDV > 0:
            SD.display(SDV - 1)
        else:
            self.timer2.stop()


if __name__ == "__main__":
    import sys
    window = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = app()
    MainWindow.show()
    sys.exit(window.exec_())